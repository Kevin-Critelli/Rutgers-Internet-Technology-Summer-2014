{\rtf1\ansi\ansicpg1252\deff0
{\fonttbl
{\f0\fnil\fcharset0\fprq0\fttruetype Times New Roman;}
{\f1\fnil\fcharset0\fprq0\fttruetype Arial;}
{\f2\fnil\fcharset0\fprq0\fttruetype Dingbats;}
{\f3\fnil\fcharset0\fprq0\fttruetype Symbol;}
{\f4\fnil\fcharset0\fprq0\fttruetype Courier New;}}
{\colortbl
\red0\green0\blue0;
\red255\green255\blue255;
\red255\green255\blue255;}
{\stylesheet
{\s1\fi-431\li720\sbasedon29\snext29 Contents 1;}
{\s2\fi-431\li1440\sbasedon29\snext29 Contents 2;}
{\s3\fi-431\li2160\sbasedon29\snext29 Contents 3;}
{\s8\fi-431\li720\sbasedon29 Lower Roman List;}
{\s5\tx431\sbasedon25\snext29 Numbered Heading 1;}
{\s6\tx431\sbasedon26\snext29 Numbered Heading 2;}
{\s7\fi-431\li720 Square List;}
{\s12\sbasedon29 Endnote Text;}
{\s22\fi-431\li720 Bullet List;}
{\s4\fi-431\li2880\sbasedon29\snext29 Contents 4;}
{\s10\fi-431\li720 Diamond List;}
{\s11\fi-431\li720 Numbered List;}
{\*\cs13\fs20\super Endnote Reference;}
{\s14\fi-431\li720 Triangle List;}
{\s15\tx431\sbasedon27\snext29 Numbered Heading 3;}
{\s16\fi-431\li720 Dashed List;}
{\s17\fi-431\li720\sbasedon11 Upper Roman List;}
{\s18\sb440\sa60\f1\fs24\b\sbasedon29\snext29 Heading 4;}
{\s19\fi-431\li720 Heart List;}
{\s35\fi-431\li720 Box List;}
{\s21\fi-431\li720\sbasedon11 Upper Case List;}
{\s9\fi-288\li288\fs20\sbasedon29 Footnote;}
{\s23\fi-431\li720 Hand List;}
{\s24\fs20\sbasedon29 Footnote Text;}
{\s25\sb440\sa60\f1\fs34\b\sbasedon29\snext29 Heading 1;}
{\s26\sb440\sa60\f1\fs28\b\sbasedon29\snext29 Heading 2;}
{\s20\qc\sb240\sa120\f1\fs32\b\sbasedon29\snext29 Contents Header;}
{\s28\fi-431\li720 Tick List;}
{\s27\sb440\sa60\f1\fs24\b\sbasedon29\snext29 Heading 3;}
{\s30\fi-431\li720\sbasedon11 Lower Case List;}
{\s31\li1440\ri1440\sa120\sbasedon29 Block Text;}
{\s37\f4\sbasedon29 Plain Text;}
{\s33\tx1584\sbasedon5\snext29 Section Heading;}
{\s34\fi-431\li720 Implies List;}
{\s29\f0\fs24 Normal;}
{\s36\fi-431\li720 Star List;}
{\*\cs32\fs20\super Footnote Reference;}
{\s38\tx1584\sbasedon5\snext29 Chapter Heading;}
{\s39\fi-288\li288\sbasedon29 Endnote;}}
\kerning0\cf0\ftnbj\fet2\ftnstart1\ftnnar\aftnnar\ftnstart1\aftnstart1\aenddoc\revprop3{\*\rdf}{\info\uc1{\author Kevin}}\deftab720\viewkind1\paperw12240\paperh15840\margl1440\margr1440\widowctrl
\sectd\sbknone\colsx360\pgncont\ltrsect
\pard\plain\ltrpar\ql\s29\itap0{\s29\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch [CS 352] Project 2  Write - Up}{\s29\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\s29\itap0{\s29\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\s29\itap0{\s29\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Kevin Critelli, Paul Jones, Richie Vonder Schmidt}{\s29\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\s29\itap0{\s29\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\s29\itap0{\s29\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch -High Level Description}{\s29\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\s29\itap0{\s29\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch \tab }{\s29\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\s29\itap0{\s29\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch \tab The Programs main class is in RUBTClient, this class keeps our main data that threads will be accessing. We can arguably change the implementation to save this information in a separate class specifically for that purpose of storing information, but as of right now it store in RUBTClient. This main class will first call torrent info classes and tracker classes to one, parse the data from the torrent, and two, send an http get request to tracker  / announce ourselves. The main class than goes through the list of peers, sets up DPeer threads to handle the connection to that specific peer. So the DPeer threads are spawned to request pieces of the file from the peers, and than we Spawn a FrontDoor object, which simply is a serverSocket listening for incoming requests for pieces that we have. Whenever it receives a request, it will spawn a UPeer Object/Thread to handle the connection, and send them the pieces they want. Main class will than spawn a Tracker thread, this thread simply sends announces with our updated information during the interval specified by the tracker response. At that point the interface kicks in, and simply waits for user input to exit the program. Upon exiting the program before finishing the download, the Main class will call a utility function write the data we have so far into a file, so we can read those bytes back into memory when we resume the session at a later time. The program will save the file as whatever args[1] one, so even if the torrent file is a .mov file, our program will accept a user trying to save it as a .jpg, it will be up to them to change it to its correct extension in order to properly view the data.}{\s29\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\s29\itap0{\s29\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch In terms of robustness, the program may have a few hickups, if connecting to peers that are not set up by the graders, ie all the peers that you have told us to communicate with. So to see full capabilities of the program please run against those. In fact our client will extract the full list of ips, but only attempt to interact with ip\uc1\u8217\'92s starting with 128.6.171. If you would like it to connect to other ip\uc1\u8217\'92s you can simply change the for loop in RUBT Main class where we extract the ips and start running the threads. }{\s29\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\s29\itap0{\s29\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch For our serverSocket we chose port 5600, it is hardcoded into the program, we did not put a random function to generate a new port each time the program is run. In any case that you want to change the port or if this particular port seems to be causing trouble, you can change that yourself in FrontDoor.java}{\s29\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\s29\itap0{\s29\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch In any case that our threads are choked from a seed, the thread will simply wait for up to two minutes to receive an unchoke back from the peer, if it does it will resume, if not it will close the connection.}{\s29\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\s29\itap0{\s29\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Due to time constraint as well as a need to study for the final our Program may not properly handle 10+ connections, I have tested it simultaneously downloading from 6 seeds while uploading, or say uploading to two peers at the same time, or downloading from two peers from the same time. But there is no management in terms of having open 6 connections open at once.}{\s29\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\s29\itap0{\s29\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Did a test in the labs, where I ran our client from my laptop, and than put my client on two ilab machines, except I had those programs on the ilab machines simply try to connect to my laptop and download the file. It worked, I ran my client from my laptop, started downloading the project2.torrent, and both ilab machines were able to successfully download the file from me while I was downloading the file from the seeds that you guys have running.}{\s29\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\s29\itap0{\s29\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\s29\itap0{\s29\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch The gui will not allow the user to click finish and save button until the file is completely finished, if they want to exit prematurely they will exit by closing the window, the program will than save state and allow them to resume later.}{\s29\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\s29\itap0{\s29\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\s29\itap0{\s29\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Functionalities Not Implemented:}{\s29\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\s29\itap0{\s29\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\s29\itap0{\s29\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Rarest-piece-first selection algorithm: 5%}{\s29\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\s29\itap0{\s29\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch \tab -Not Implemented}{\s29\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\s29\itap0{\s29\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\s29\itap0{\s29\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Ability to maintain at least 10 peer connections: 5%}{\s29\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\s29\itap0{\s29\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch \tab -Not Implemented, This may actually work but I have not done any testing with it nor tried it out, simply because of time constraint and needing to study for the final}{\s29\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\s29\itap0{\s29\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\s29\itap0{\s29\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Optimistic choking/unchoking (includes rate measurement and throttling): 10%}{\s29\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\s29\itap0{\s29\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch \tab -Not Implemented}{\s29\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\s29\itap0{\s29\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\s29\itap0{\s29\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch (also if someone asks our client/upload thread for a piece we don't have, it may hang for a bit, because we do not act upon it, due to time constraint)}{\s29\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\s29\itap0{\s29\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\s29\itap0{\s29\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch -Class Description (of all Classes we created)}{\s29\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\s29\itap0{\s29\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch \tab }{\s29\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\s29\itap0{\s29\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch DPeer -This class encapsulates all necessary functions in order to maintain a connection to a peer, send messages back and forth between the peer, and of course download pieces of the file. This class sub-classes Peer.}{\s29\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\s29\itap0{\s29\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\s29\itap0{\s29\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch FrontDoor-This class simply sits on a server socket, and spawns UPeer threads to handle upload connections to peers that want pieces of the file we have.}{\s29\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\s29\itap0{\s29\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\s29\itap0{\s29\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Message-This class encapsulates all necessary information of all the different Bit Torrent protocol messages.}{\s29\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\s29\itap0{\s29\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\s29\itap0{\s29\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Peer-Abstract class representing a peer connection. UPeer and DPeer subclass this Peer class, this class contains all common fields/functionalities shared between the two types of connections, seeding and leeching. This class subclass\uc1\u8217\'92s Main class that way Dpeer and Upeer threads have access to main data.}{\s29\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\s29\itap0{\s29\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\s29\itap0{\s29\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch RUBTClient-Main class, calls other necessary classes to start the torrent process, contains a small interface waiting for user input to exit the program.}{\s29\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\s29\itap0{\s29\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\s29\itap0{\s29\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch RUBTClientConstants-Class containing the constant variables used throughout our program}{\s29\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\s29\itap0{\s29\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\s29\itap0{\s29\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch RUBTClientUtils-Class containing utility functions used across our program. Most importantly it contains the synchronized functions used to access data in our Main Class.}{\s29\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\s29\itap0{\s29\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\s29\itap0{\s29\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch TrackerResponse-Class used to interpret tracker responses.}{\s29\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\s29\itap0{\s29\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\s29\itap0{\s29\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch TrackerThread-Thread that sends re-announces to the tracker during the interval with our updated information.}{\s29\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\s29\itap0{\s29\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\s29\itap0{\s29\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch -Feedback}{\s29\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\s29\itap0{\s29\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\s29\itap0{\s29\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch -I found it difficult to test the robustness of our program because I do not have access to many machines where I can have say 10+ downloads running. }{\s29\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\s29\itap0{\s29\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\s29\itap0{\s29\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch \tab -I found that I had to re-design the program multiples times in order to keep it clean and organized as I expanded parts to it}{\s29\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\s29\itap0{\s29\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\s29\itap0{\s29\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch \tab }{\s29\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\s29\itap0{\s29\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch \tab }{\s29\f0\fs24\lang1033{\*\listtag0}\par}}